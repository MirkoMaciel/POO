Operadores unarios:
Estos operadores actuan sobre un único valor, por ej: si x vale 5, -x valdrá -5.
Básicamente cuando el + y } estan por delante de otro operador, actuan como unitarios.
Determinan una caracteristica del mismo.
+10 quiere decir que el valor es positivo
-10 quiere decir que el valor es negativo

Estos tienen un nivel de precedencia de 1.


Operadores aritmeticos:

Sirven para realizar procedimientos matemáticos básicos, y siguen una regla algebrica típica, que especifica la precedencia de dichas operaciones.
La evaluación de expresiones, cambia si entran en juego los parentesis, ya que por jerarquia, toma el nivel más alto de precedencia.
El orden jerarquia es:
- unarios (Estos son aquellos que determinan si un num es positivo o negativo)
- multiplicacion, division y mod ( * . / , % )
- suma y resta ( + , - )

Operadores lógicos:

En honor a George Boole, se tiene que los operadores se los llaman 'Booelan' O 'Booleanos'.
Los existentes son: and , or , xor , xand , not
Dependiendo de con cual trabajemos, nos arrojará un valor o otro, dependiendo la combinación que lea.
Estos valores son "binarios" osea solo pueden tener 2 tipos, verdadero o falso. En base a estos, determina el resultado.

And: Ambos deben ser verdaderos para que sea verdadero, cualquier otra combinación, da falso.
(Dentro de java se utiliza el &, para el and, teniendo dos opciones & , &&, una de ellas a penas una condición no se cumple, sale automaticamente, básicamente la evaluación "es más rapida" )
or: Si al menos uno es verdadero, la expresión es verdadera, salvo que ambos sean falsos.
(Dentro de java, se utiliza el | para el or, tiene la misma posibilidad que el anda, con dos combinaciones | , ||)
xor: Se tiene que respetar que ambos operadores sean distintos, para que arroje un verdadero.
NOT: Negación


Operador condicional o ternario: 
Es un operador que tomar 3 argumentos y devuelve un resultado dependiendo que condición se compruebe.
Es asociativo a la derecha, osea que todos sus operandos de igual prioridad son asociativos para dicho lado.

En si funciona, de la siguiente manera:
Tenemos 3 argumentos:

expresion_1 ? expresion_2 : expresion_3

Dependiendo el valor booleando de la primer expresión, realiza la 2 o 3 expresion.
Si es verdadero, se realiza la expresion a la izquierda de los :
Si es falso, se realiza la expresion a la derecha de los :